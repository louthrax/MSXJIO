

#include "Drive.h"

/*$off*/
static unsigned char g_acFakeFloppyMBR[512] = {
	0xEB, 0xFE, 0x90, 0x46, 0x4C, 0x4F, 0x50, 0x50, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xAA
};
/*$on*/

/*
 =======================================================================================================================
 =======================================================================================================================
 */
Drive::Drive()
{
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
Drive::~Drive()
{
	vEjectMedia();
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
bool Drive::bInsertMedia(QString _szMediaPath)
{
	vEjectMedia();

	m_poMediaFile = new QFile(_szMediaPath);

	if(m_poMediaFile)
	{
		if(!QFile::exists(m_poMediaFile->fileName()))
		{
			m_poMediaFile = nullptr;
		}
		else
		{
			if(m_poMediaFile->open(QIODevice::ReadWrite))
			{
				m_bMediaWriteProtected = false;
			}
			else if(m_poMediaFile->open(QIODevice::ReadOnly))
			{
				m_bMediaWriteProtected = true;
			}
			else
			{
				m_poMediaFile = nullptr;
			}
		}
	}

    if (m_poMediaFile)
    {

        if(m_poMediaFile->seek(0))
        {
            QByteArray oSector;
            oSector = m_poMediaFile->read(512);
            if (oSector.size() == 512)
            {
                if (((unsigned char)oSector[510] == 0x55) &&
                    ((unsigned char)oSector[511] == 0xAA))
                {
                        m_eMediaType = eMediaHardDisk;
                }
                else
                {
                    m_eMediaType = eMediaFloppy;
                }
            }
        }
    }

	return m_poMediaFile != nullptr;
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
QString Drive::oMediaPath()
{
	if(m_poMediaFile)
	{
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
		QFileInfo	oInfo(*m_poMediaFile);
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

		return oInfo.absoluteFilePath();
	}
	else
		return "";
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
qint64 Drive::iMediaSize()
{
	if(m_poMediaFile)
	{
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
		QFileInfo	oInfo(*m_poMediaFile);
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

		return oInfo.size();
	}
	else
		return 0;
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
QString Drive::oMediaLastModified()
{
	if(m_poMediaFile)
	{
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
		QFileInfo	oInfo(*m_poMediaFile);
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

		return oInfo.lastModified().toString(Qt::ISODate);
	}
	else
		return "";
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
tdDriveError Drive::eReadSectors(unsigned int _uiSector, unsigned int _uiSectorsCount, QByteArray &_roResult)
{
	if(m_poMediaFile)
	{
        if (m_eMediaType == eMediaFloppy)
        {
            if (_uiSector == 0)
            {
                _roResult.setRawData((const char*)g_acFakeFloppyMBR, sizeof(g_acFakeFloppyMBR));
                return eDriveErrorOK;
            }
            else
                _uiSector--;
        }
		if(m_poMediaFile->seek(_uiSector * 512))
		{
			_roResult = m_poMediaFile->read(_uiSectorsCount * 512);
			return(_roResult.size() == _uiSectorsCount * 512) ? eDriveErrorOK : eDriveErrorReadError;
		}
		else
			return eDriveErrorReadError;
	}
	else
	{
		return eDriveErrorNoMedia;
	}
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
tdDriveError Drive::eWriteSectors(unsigned int _uiSector, unsigned int _uiSectorsCount, char *_pcData)
{
	if(!m_poMediaFile)
	{
		return eDriveErrorNoMedia;
	}
	else
	{
		if(m_bMediaWriteProtected || m_bDriveWriteProtected)
		{
			return eDriveErrorWriteProtected;
		}
		else
		{
			/*~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
			unsigned int	uiBytesWritten;
			/*~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

			m_poMediaFile->seek(_uiSector * 512);
			uiBytesWritten = m_poMediaFile->write(_pcData, _uiSectorsCount * 512);
			m_poMediaFile->flush();

			if(uiBytesWritten == _uiSectorsCount * 512)
				return eDriveErrorOK;
			else
				return eDriveErrorWriteError;
		}
	}
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void Drive::vEjectMedia()
{
	if(m_poMediaFile)
	{
		m_poMediaFile->close();
		delete m_poMediaFile;
		m_poMediaFile = nullptr;
        m_eMediaType = eMediaEmpty;
	}
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
bool Drive::bIsMediaWriteProtected()
{
	return m_bMediaWriteProtected;
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
tdMediaType Drive::eMediaType()
{
	return m_eMediaType;
}
